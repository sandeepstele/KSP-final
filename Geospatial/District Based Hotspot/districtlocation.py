# -*- coding: utf-8 -*-
"""Districtlocation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LPgzW6SwAlt_-GUIMAaQUGs2jo6WdASC
"""

import pandas as pd
import numpy as np

csv_files = ['AccusedData.csv', 'ComplainantDetailsData.csv', 'FIR_Details_Data.csv', 'VictimInfoDetails.csv']
data_frames = {}

# Load each CSV file and store it in the dictionary
for file in csv_files:
    data_frames[file] = pd.read_csv(file)

for file_name, data_frame in data_frames.items():
  print(f"File name: {file_name}")
  print(f"Column names: {list(data_frame.columns)}")
  print(f"Dimensions: {data_frame.shape}")
  print("\n")

import pandas as pd

# Load the FIR_Details_Data.csv file into a DataFrame
fir_data = pd.read_csv('FIR_Details_Data.csv')

# Print the column labels
print("Column Labels:")
print(fir_data.columns)

# Print two rows of the DataFrame
print("\nTwo Rows of Data:")
print(fir_data.head(2))

import pandas as pd

# Load the FIR_Details_Data.csv file into a DataFrame
fir_data = pd.read_csv('FIR_Details_Data.csv')

# Print the column format (data types)
print("Column Format:")
print(fir_data.dtypes)

import matplotlib.pyplot as plt

# Histogram for numerical variables
numerical_columns = fir_data.select_dtypes(include=['int64', 'float64']).columns
for column in numerical_columns:
    plt.hist(fir_data[column], bins=20)
    plt.title(column)
    plt.xlabel(column)
    plt.ylabel('Frequency')
    plt.show()

# Correlation matrix
correlation_matrix = fir_data.corr()

# Scatter plot for selected variables
plt.scatter(fir_data['Age 0'], fir_data['VICTIM COUNT'])
plt.title('Scatter Plot: Age vs VICTIM COUNT')
plt.xlabel('Age')
plt.ylabel('VICTIM COUNT')
plt.show()

# Bar plot for selected categorical variable
plt.bar(fir_data['District_Name'].value_counts().index, fir_data['District_Name'].value_counts().values)
plt.title('Bar Plot: District_Name')
plt.xlabel('District_Name')
plt.ylabel('Frequency')
plt.xticks(rotation=90)
plt.show()

import pandas as pd
import folium
from folium.plugins import HeatMap

# Load the FIR_Details_Data.csv file into a DataFrame
fir_data = pd.read_csv('FIR_Details_Data.csv')

# Filter out rows where Latitude and Longitude are not null and not both 0 or NaN
filtered_data = fir_data.dropna(subset=['Latitude', 'Longitude'])
filtered_data = filtered_data[(filtered_data['Latitude'] != 0) | (filtered_data['Longitude'] != 0)]

# Create a map centered around the mean latitude and longitude
map_center = [filtered_data['Latitude'].mean(), filtered_data['Longitude'].mean()]
mymap = folium.Map(location=map_center, zoom_start=10)

# Create a HeatMap layer
heat_data = [[row['Latitude'], row['Longitude']] for index, row in filtered_data.iterrows()]
HeatMap(heat_data).add_to(mymap)

# Save the map to an HTML file
mymap.save("hotspots_map.html")

import pandas as pd
import folium
from folium.plugins import HeatMap

# Load the FIR_Details_Data.csv file into a DataFrame


# Define the bounding box for Karnataka
karnataka_bbox = {
    'min_lat': 11.5934,
    'max_lat': 18.1667,
    'min_lon': 74.0500,
    'max_lon': 78.5885
}

# Filter out locations outside Karnataka
karnataka_data = fir_data[
    (fir_data['Latitude'] >= karnataka_bbox['min_lat']) &
    (fir_data['Latitude'] <= karnataka_bbox['max_lat']) &
    (fir_data['Longitude'] >= karnataka_bbox['min_lon']) &
    (fir_data['Longitude'] <= karnataka_bbox['max_lon'])
]

# Randomly select 10,000 entries after filtering
karnataka_data = karnataka_data.sample(n=10000, random_state=42)

# Group data by latitude and longitude and count occurrences
crime_counts = karnataka_data.groupby(['Latitude', 'Longitude']).size().reset_index(name='Crime Count')

# Create a map centered around the mean latitude and longitude of Karnataka
map_center = [karnataka_data['Latitude'].mean(), karnataka_data['Longitude'].mean()]
mymap = folium.Map(location=map_center, zoom_start=7, tiles='CartoDB positron')

# Add a HeatMap layer
heat_data = [[row['Latitude'], row['Longitude']] for index, row in karnataka_data.iterrows()]
HeatMap(heat_data).add_to(mymap)

# Add a TileLayer with detailed tiles
folium.TileLayer('openstreetmap').add_to(mymap)

# Add a feature group for popups
fg = folium.FeatureGroup(name='Crime Count')

# Add popups with crime counts for each tile
for index, row in crime_counts.iterrows():
    popup_text = f'Crime Count: {row["Crime Count"]}'
    folium.Marker([row['Latitude'], row['Longitude']], popup=popup_text).add_to(fg)

# Add the feature group to the map
mymap.add_child(fg)

# Add layer control
folium.LayerControl().add_to(mymap)

# Save the map to an HTML file
mymap.save("karnataka_hotspots_map.html")

import pandas as pd
import folium
from folium.plugins import HeatMap

# Load the FIR_Details_Data.csv file into a DataFrame


# Define the bounding box for Karnataka
karnataka_bbox = {
    'min_lat': 11.5934,
    'max_lat': 18.1667,
    'min_lon': 74.0500,
    'max_lon': 78.5885
}

# Filter out locations outside Karnataka
karnataka_data = fir_data[
    (fir_data['Latitude'] >= karnataka_bbox['min_lat']) &
    (fir_data['Latitude'] <= karnataka_bbox['max_lat']) &
    (fir_data['Longitude'] >= karnataka_bbox['min_lon']) &
    (fir_data['Longitude'] <= karnataka_bbox['max_lon'])
]

# Randomly select 10,000 entries after filtering
karnataka_data = karnataka_data.sample(n=10000, random_state=42)

# Group data by latitude and longitude and count occurrences
crime_counts = karnataka_data.groupby(['Latitude', 'Longitude']).size().reset_index(name='Crime Count')

# Create a map centered around the mean latitude and longitude of Karnataka
map_center = [karnataka_data['Latitude'].mean(), karnataka_data['Longitude'].mean()]
mymap = folium.Map(location=map_center, zoom_start=7, tiles='CartoDB positron')

# Add a HeatMap layer
heat_data = [[row['Latitude'], row['Longitude']] for index, row in karnataka_data.iterrows()]
HeatMap(heat_data).add_to(mymap)

# Add a TileLayer with detailed tiles
folium.TileLayer('openstreetmap').add_to(mymap)

# Add a feature group for popups
fg = folium.FeatureGroup(name='Crime Count')

# Add popups with crime counts for each tile
for index, row in crime_counts.iterrows():
    popup_text = f'Crime Count: {row["Crime Count"]}'
    folium.Marker([row['Latitude'], row['Longitude']], popup=popup_text).add_to(fg)

# Add the feature group to the map
mymap.add_child(fg)

# Add layer control
folium.LayerControl().add_to(mymap)

# Save the map to an HTML file
mymap.save("karnataka_hotspots_map.html")

# Assuming you already have the DataFrame 'fir_data' loaded

# Unique values in the 'CrimeGroup_Name' column
unique_crime_groups = fir_data['CrimeGroup_Name'].unique()

# Unique values in the 'CrimeHead_Name' column
unique_crime_heads = fir_data['CrimeHead_Name'].unique()

print("Unique Crime Groups:")
print(unique_crime_groups)

print("\nUnique Crime Heads:")
print(unique_crime_heads)

import os

# Iterate through each unique crime group
for crime_group in unique_crime_groups:
    # Define the filename for the HTML file
    filename = f"{crime_group}_hotspots_map_with_marker_cluster.html"

    # Check if the file already exists
    if os.path.exists(filename):
        print(f"HTML file '{filename}' already exists. Skipping...")
        continue

    try:
        # Filter out locations outside the bounding box and belonging to the specific crime group
        crime_group_data = fir_data[
            (fir_data['Latitude'] >= karnataka_bbox['min_lat']) &
            (fir_data['Latitude'] <= karnataka_bbox['max_lat']) &
            (fir_data['Longitude'] >= karnataka_bbox['min_lon']) &
            (fir_data['Longitude'] <= karnataka_bbox['max_lon']) &
            (fir_data['CrimeGroup_Name'] == crime_group)
        ]

        # Check if there is data for the crime group
        if len(crime_group_data) == 0:
            print(f"No data found for crime group '{crime_group}'. Skipping...")
            continue

        # Create a map centered around the mean latitude and longitude of the crime group
        map_center = [crime_group_data['Latitude'].mean(), crime_group_data['Longitude'].mean()]
        mymap = folium.Map(location=map_center, zoom_start=10, tiles='CartoDB positron')

        # Create a MarkerCluster layer for crime locations
        marker_cluster = MarkerCluster(name='Crime Locations', overlay=True, control=False)

        # Add markers for each crime location to the MarkerCluster
        for index, row in crime_group_data.iterrows():
            popup_text = f"Crime Group: {row['CrimeGroup_Name']}<br>Crime Head: {row['CrimeHead_Name']}<br>Latitude: {row['Latitude']}<br>Longitude: {row['Longitude']}"
            folium.Marker(location=[row['Latitude'], row['Longitude']], popup=popup_text).add_to(marker_cluster)

        # Add the MarkerCluster to the map
        mymap.add_child(marker_cluster)

        # Add layer control
        folium.LayerControl().add_to(mymap)

        # Save the map to an HTML file
        mymap.save(filename)
        print(f"HTML file '{filename}' created successfully.")

    except Exception as e:
        print(f"Error occurred while processing crime group '{crime_group}': {str(e)}")